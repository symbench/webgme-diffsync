/*globals define, _, WebGMEGlobal, $*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Mon Sep 19 2022 18:43:02 GMT-0500 (Central Daylight Time).
 */

define([
    'js/PanelBase/PanelBaseWithHeader',
    'js/PanelManager/IActivePanel',
    'widgets/JSONEditor/JSONEditorWidget',
    './DemoDiffSyncControl'
], function (
    PanelBaseWithHeader,
    IActivePanel,
    JSONEditorWidget,
    DemoDiffSyncControl
) {
    'use strict';
    function DemoDiffSyncPanel(layoutManager, params) {
        var options = {};
        //set properties from options
        options[PanelBaseWithHeader.OPTIONS.LOGGER_INSTANCE_NAME] = 'DemoDiffSyncPanel';
        options[PanelBaseWithHeader.OPTIONS.FLOATING_TITLE] = true;

        //call parent's constructor
        PanelBaseWithHeader.apply(this, [options, layoutManager]);

        this._client = params.client;

        //initialize UI
        this._initialize();

        this.logger.debug('ctor finished');
    }

    //inherit from PanelBaseWithHeader
    _.extend(DemoDiffSyncPanel.prototype, PanelBaseWithHeader.prototype);
    _.extend(DemoDiffSyncPanel.prototype, IActivePanel.prototype);

    DemoDiffSyncPanel.prototype._initialize = function () {

        //set Widget title
        this.setTitle('');
        this.widgetElements = this._splitContainer();

        this.widgets =  this.widgetElements.map(($el, idx) => new JSONEditorWidget(this.logger, $el, {
            widgetClass: `json-editor${idx}`
        }));

        this.control = new DemoDiffSyncControl({
            logger: this.logger,
            client: this._client,
            widgets: this.widgets
        });

        this.onActivate();
    };

    DemoDiffSyncPanel.prototype._splitContainer = function () {
        const splitWidgetElements = [$('<div/>'), $('<div/>'), $('<div/>')];
        splitWidgetElements.forEach(el => this.$el.append(el));

        this.$el.css('display', 'flex');
        this.$el.css('flex-wrap', 'wrap');
        splitWidgetElements.forEach($el => {
            $el.css('flex-grow', 1);
            $el.css('width', '30%');
            $el.css('margin', '10px');
        });

        return splitWidgetElements;
    };

    /* OVERRIDE FROM WIDGET-WITH-HEADER */
    /* METHOD CALLED WHEN THE WIDGET'S READ-ONLY PROPERTY CHANGES */
    DemoDiffSyncPanel.prototype.onReadOnlyChanged = function (isReadOnly) {
        //apply parent's onReadOnlyChanged
        PanelBaseWithHeader.prototype.onReadOnlyChanged.call(this, isReadOnly);

    };

    DemoDiffSyncPanel.prototype.onResize = function (width, height) {
        this.logger.debug('onResize --> width: ' + width + ', height: ' + height);
        this.$el.width(width);
        this.$el.height(height);
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    DemoDiffSyncPanel.prototype.destroy = function () {
        this.control.destroy();
        this.widgets.forEach(widget => widget.destroy());

        PanelBaseWithHeader.prototype.destroy.call(this);
        WebGMEGlobal.KeyboardManager.setListener(undefined);
        WebGMEGlobal.Toolbar.refresh();
    };

    DemoDiffSyncPanel.prototype.onActivate = function () {
        this.widgets.forEach(widget => widget.onActivate());
        this.control.onActivate();
        WebGMEGlobal.KeyboardManager.setListener(this.widget);
        WebGMEGlobal.Toolbar.refresh();
    };

    DemoDiffSyncPanel.prototype.onDeactivate = function () {
        this.widgets.forEach(widget => widget.onDeactivate());
        this.control.onDeactivate();
        WebGMEGlobal.KeyboardManager.setListener(undefined);
        WebGMEGlobal.Toolbar.refresh();
    };

    return DemoDiffSyncPanel;
});
