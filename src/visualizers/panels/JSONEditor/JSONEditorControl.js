/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Mon Sep 19 2022 12:15:10 GMT-0500 (Central Daylight Time).
 */

define([
    'webgme-json-importer/JSONImporter',
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames',
], function (
    JSONImporter,
    CONSTANTS,
) {

    'use strict';

    class JSONEditorControl {
        constructor(options) {
            this._logger = options.logger.fork('Control');

            this._client = options.client;

            // Initialize core collections and variables
            this._widget = options.widget;

            this._currentNodeId = null;
            this._currentNodeParentId = undefined;

            this._initWidgetEventHandlers();

            this._logger.debug('ctor finished');
        }

        _initWidgetEventHandlers = function () {
            const onChange = (/* updated, previous, error, patch */) => {
                // ToDo Implement
            };

            this._widget.setOnChange(onChange);
        };

        async getCoreInstance() {
            return await new Promise((resolve, reject) => this._client.getCoreInstance(null, (err, result) => err ? reject(err) : resolve(result)));
        }

        async setStateFromNode(nodeId) {
            const {core, rootNode} = await this.getCoreInstance();

            const node = await core.loadByPath(rootNode, nodeId);

            const importer = new JSONImporter(core, rootNode);

            const json = await importer.toJSON(node);
            this._widget.setState({json});
        }

        selectedObjectChanged(nodeId) {
            this._logger.debug('activeObject nodeId \'' + nodeId + '\'');

            // Remove current territory patterns
            if (this._territoryId) {
                this._client.removeUI(this._territoryId);
                this._territoryId = null;
            }

            this._currentNodeId = nodeId;
            if (typeof this._currentNodeId === 'string') {

                // Put new node's info into territory rules
                this._selfPatterns = {};
                // TODO: Will this work? I can't remember tbh...
                this._selfPatterns[nodeId] = {children: Infinity};  // Territory "rule"

                this._territoryId = this._client.addUI(this, () => {
                    this.setStateFromNode(nodeId);
                });
                this._client.updateTerritory(this._territoryId, this._selfPatterns);
            }
        }

        _stateActiveObjectChanged(model, activeObjectId) {
            if (this._currentNodeId === activeObjectId) {
                // The same node selected as before - do not trigger
            } else {
                this.selectedObjectChanged(activeObjectId);
            }
        }

        _getObjectDescriptor(/*nodeId*/) {
            return {};
        }

        /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
        destroy() {
            this._detachClientEventListeners();
        }

        _attachClientEventListeners() {
            this._detachClientEventListeners();
            WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
        }

        _detachClientEventListeners() {
            WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
        }

        onActivate() {
            this._attachClientEventListeners();
            if (typeof this._currentNodeId === 'string') {
                WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
            }
        }

        onDeactivate() {
            this._detachClientEventListeners();
        }
    }

    return JSONEditorControl;
});
